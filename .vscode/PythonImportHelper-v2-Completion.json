[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Row",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "RowMapping",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "Connection",
        "importPath": "sqlalchemy.engine",
        "description": "sqlalchemy.engine",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine",
        "documentation": {}
    },
    {
        "label": "async_engine_from_config",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncEngine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.models.base",
        "description": "src.models.base",
        "isExtraImport": true,
        "detail": "src.models.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.models.base",
        "description": "src.models.base",
        "isExtraImport": true,
        "detail": "src.models.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.models.base",
        "description": "src.models.base",
        "isExtraImport": true,
        "detail": "src.models.base",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.user",
        "description": "src.models.user",
        "isExtraImport": true,
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "src.models.item",
        "description": "src.models.item",
        "isExtraImport": true,
        "detail": "src.models.item",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "src.models.item",
        "description": "src.models.item",
        "isExtraImport": true,
        "detail": "src.models.item",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.db",
        "description": "src.db",
        "isExtraImport": true,
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "init_db",
        "importPath": "src.db",
        "description": "src.db",
        "isExtraImport": true,
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "src.schemas.item",
        "description": "src.schemas.item",
        "isExtraImport": true,
        "detail": "src.schemas.item",
        "documentation": {}
    },
    {
        "label": "ItemCreate",
        "importPath": "src.schemas.item",
        "description": "src.schemas.item",
        "isExtraImport": true,
        "detail": "src.schemas.item",
        "documentation": {}
    },
    {
        "label": "ItemUpdate",
        "importPath": "src.schemas.item",
        "description": "src.schemas.item",
        "isExtraImport": true,
        "detail": "src.schemas.item",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "PositiveFloat",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlmodel.ext.asyncio.session",
        "description": "sqlmodel.ext.asyncio.session",
        "isExtraImport": true,
        "detail": "sqlmodel.ext.asyncio.session",
        "documentation": {}
    },
    {
        "label": "item_router",
        "importPath": "src.routers.item",
        "description": "src.routers.item",
        "isExtraImport": true,
        "detail": "src.routers.item",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.7b803e850fb1_init",
        "description": "migrations.versions.7b803e850fb1_init",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"items\",\n        sa.Column(\"id\", sa.Integer(), nullable=False),\n        sa.Column(\"name\", sa.String(), nullable=True),\n        sa.Column(\"price\", sa.Float(), nullable=True),\n        sa.Column(\"quantity\", sa.Integer(), nullable=True),\n        sa.PrimaryKeyConstraint(\"id\"),\n    )",
        "detail": "migrations.versions.7b803e850fb1_init",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.7b803e850fb1_init",
        "description": "migrations.versions.7b803e850fb1_init",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f(\"ix_tokens_token\"), table_name=\"tokens\")\n    op.drop_index(op.f(\"ix_tokens_id\"), table_name=\"tokens\")\n    op.drop_table(\"tokens\")\n    op.drop_index(op.f(\"ix_users_username\"), table_name=\"users\")\n    op.drop_index(op.f(\"ix_users_email\"), table_name=\"users\")\n    op.drop_table(\"users\")\n    op.drop_table(\"items\")\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.7b803e850fb1_init",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "do_run_migrations",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def do_run_migrations(connection: Connection) -> None:\n    context.configure(connection=connection, target_metadata=target_metadata)\n    with context.begin_transaction():\n        context.run_migrations()\nasync def run_async_migrations() -> None:\n    \"\"\"In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = async_engine_from_config(\n        config.get_section(config.config_ini_section, {}),",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\"\"\"\n    asyncio.run(run_async_migrations())\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = Base.metadata",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "src.models.base",
        "description": "src.models.base",
        "peekOfCode": "class Base(DeclarativeBase):\n    pass",
        "detail": "src.models.base",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "src.models.item",
        "description": "src.models.item",
        "peekOfCode": "class Item(Base):\n    __tablename__ = \"items\"\n    id: Mapped[int] = Column(Integer, primary_key=True)\n    name: Mapped[str] = Column(String)\n    price: Mapped[float] = Column(Float)\n    quantity: Mapped[int] = Column(Integer)",
        "detail": "src.models.item",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "src.models.user",
        "description": "src.models.user",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    id: Mapped[int] = Column(Integer, primary_key=True, autoincrement=True)\n    username: Mapped[str] = Column(String, unique=True, index=True)\n    email: Mapped[str] = Column(String, unique=True, index=True)\n    password: Mapped[str] = Column(String)\n    role: Mapped[str] = Column(String, default=\"user\")\nclass Token(Base):\n    __tablename__ = \"tokens\"\n    id: Mapped[int] = Column(Integer, primary_key=True, index=True)",
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "src.models.user",
        "description": "src.models.user",
        "peekOfCode": "class Token(Base):\n    __tablename__ = \"tokens\"\n    id: Mapped[int] = Column(Integer, primary_key=True, index=True)\n    token: Mapped[str] = Column(String, index=True)\n    user_id: Mapped[int] = Column(Integer, ForeignKey(\"users.id\"))",
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "item_router",
        "kind": 5,
        "importPath": "src.routers.item",
        "description": "src.routers.item",
        "peekOfCode": "item_router = APIRouter()\n@item_router.get(\"/items\")\nasync def get_items(\n    skip: int = 0, limit: int = 50, db: Session = Depends(get_db)\n) -> Sequence[ItemSchema]:\n    stmt = select(Item).offset(skip).limit(limit)\n    result = await db.execute(stmt)\n    return result.scalars().all()\n@item_router.post(\"/items\")\nasync def create_item(data: ItemCreate, db: Session = Depends(get_db)) -> ItemSchema:",
        "detail": "src.routers.item",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "src.schemas.item",
        "description": "src.schemas.item",
        "peekOfCode": "class Item(BaseModel):\n    id: int\n    name: str\n    price: PositiveFloat\nclass ItemCreate(BaseModel):\n    name: str\n    price: PositiveFloat\nclass ItemUpdate(BaseModel):\n    name: str | None = None\n    price: PositiveFloat | None = None",
        "detail": "src.schemas.item",
        "documentation": {}
    },
    {
        "label": "ItemCreate",
        "kind": 6,
        "importPath": "src.schemas.item",
        "description": "src.schemas.item",
        "peekOfCode": "class ItemCreate(BaseModel):\n    name: str\n    price: PositiveFloat\nclass ItemUpdate(BaseModel):\n    name: str | None = None\n    price: PositiveFloat | None = None",
        "detail": "src.schemas.item",
        "documentation": {}
    },
    {
        "label": "ItemUpdate",
        "kind": 6,
        "importPath": "src.schemas.item",
        "description": "src.schemas.item",
        "peekOfCode": "class ItemUpdate(BaseModel):\n    name: str | None = None\n    price: PositiveFloat | None = None",
        "detail": "src.schemas.item",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "src.config",
        "description": "src.config",
        "peekOfCode": "SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30",
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "src.config",
        "description": "src.config",
        "peekOfCode": "ALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30",
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "src.config",
        "description": "src.config",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = 30",
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "src.db",
        "description": "src.db",
        "peekOfCode": "DATABASE_URL = \"postgresql+asyncpg://postgres:root@localhost:5432/fastapi\"\nengine = AsyncEngine(create_engine(DATABASE_URL, echo=True, future=True))\nasync def init_db():\n    async with engine.begin() as conn:\n        # await conn.run_sync(SQLModel.metadata.drop_all)\n        await conn.run_sync(SQLModel.metadata.create_all)\nasync def get_db() -> AsyncSession:\n    async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)\n    async with async_session() as session:\n        yield session",
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "src.db",
        "description": "src.db",
        "peekOfCode": "engine = AsyncEngine(create_engine(DATABASE_URL, echo=True, future=True))\nasync def init_db():\n    async with engine.begin() as conn:\n        # await conn.run_sync(SQLModel.metadata.drop_all)\n        await conn.run_sync(SQLModel.metadata.create_all)\nasync def get_db() -> AsyncSession:\n    async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)\n    async with async_session() as session:\n        yield session",
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "app = FastAPI()\n@app.on_event(\"startup\")\nasync def on_startup():\n    await init_db()\napp.include_router(item_router)",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    }
]