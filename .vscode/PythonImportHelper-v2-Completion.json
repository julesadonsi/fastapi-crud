[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Row",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "RowMapping",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "Connection",
        "importPath": "sqlalchemy.engine",
        "description": "sqlalchemy.engine",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine",
        "documentation": {}
    },
    {
        "label": "async_engine_from_config",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.models.base",
        "description": "src.models.base",
        "isExtraImport": true,
        "detail": "src.models.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.models.base",
        "description": "src.models.base",
        "isExtraImport": true,
        "detail": "src.models.base",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.user",
        "description": "src.models.user",
        "isExtraImport": true,
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.user",
        "description": "src.models.user",
        "isExtraImport": true,
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.user",
        "description": "src.models.user",
        "isExtraImport": true,
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.user",
        "description": "src.models.user",
        "isExtraImport": true,
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "src.models.item",
        "description": "src.models.item",
        "isExtraImport": true,
        "detail": "src.models.item",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "src.models.item",
        "description": "src.models.item",
        "isExtraImport": true,
        "detail": "src.models.item",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "custom_app_context",
        "importPath": "passlib.apps",
        "description": "passlib.apps",
        "isExtraImport": true,
        "detail": "passlib.apps",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "Select",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.db",
        "description": "src.db",
        "isExtraImport": true,
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.db",
        "description": "src.db",
        "isExtraImport": true,
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.db",
        "description": "src.db",
        "isExtraImport": true,
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "UserCreateSchema",
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "isExtraImport": true,
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "isExtraImport": true,
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "AuthData",
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "isExtraImport": true,
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "LoginData",
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "isExtraImport": true,
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "UserUpdateSchema",
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "isExtraImport": true,
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "isExtraImport": true,
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "src.services.auth_service",
        "description": "src.services.auth_service",
        "isExtraImport": true,
        "detail": "src.services.auth_service",
        "documentation": {}
    },
    {
        "label": "create_refresh_token",
        "importPath": "src.services.auth_service",
        "description": "src.services.auth_service",
        "isExtraImport": true,
        "detail": "src.services.auth_service",
        "documentation": {}
    },
    {
        "label": "get_current_active_user",
        "importPath": "src.services.auth_service",
        "description": "src.services.auth_service",
        "isExtraImport": true,
        "detail": "src.services.auth_service",
        "documentation": {}
    },
    {
        "label": "get_current_active_user",
        "importPath": "src.services.auth_service",
        "description": "src.services.auth_service",
        "isExtraImport": true,
        "detail": "src.services.auth_service",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "src.schemas.item",
        "description": "src.schemas.item",
        "isExtraImport": true,
        "detail": "src.schemas.item",
        "documentation": {}
    },
    {
        "label": "ItemCreate",
        "importPath": "src.schemas.item",
        "description": "src.schemas.item",
        "isExtraImport": true,
        "detail": "src.schemas.item",
        "documentation": {}
    },
    {
        "label": "ItemUpdate",
        "importPath": "src.schemas.item",
        "description": "src.schemas.item",
        "isExtraImport": true,
        "detail": "src.schemas.item",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "PositiveFloat",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "InvalidTokenError",
        "importPath": "jwt",
        "description": "jwt",
        "isExtraImport": true,
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlmodel.ext.asyncio.session",
        "description": "sqlmodel.ext.asyncio.session",
        "isExtraImport": true,
        "detail": "sqlmodel.ext.asyncio.session",
        "documentation": {}
    },
    {
        "label": "BackgroundScheduler",
        "importPath": "apscheduler.schedulers.background",
        "description": "apscheduler.schedulers.background",
        "isExtraImport": true,
        "detail": "apscheduler.schedulers.background",
        "documentation": {}
    },
    {
        "label": "CronTrigger",
        "importPath": "apscheduler.triggers.cron",
        "description": "apscheduler.triggers.cron",
        "isExtraImport": true,
        "detail": "apscheduler.triggers.cron",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "item_router",
        "importPath": "src.controllers.item_controller",
        "description": "src.controllers.item_controller",
        "isExtraImport": true,
        "detail": "src.controllers.item_controller",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "importPath": "src.controllers.auth_controller",
        "description": "src.controllers.auth_controller",
        "isExtraImport": true,
        "detail": "src.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.7b803e850fb1_init",
        "description": "migrations.versions.7b803e850fb1_init",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"items\",\n        sa.Column(\"id\", sa.Integer(), nullable=False),\n        sa.Column(\"name\", sa.String(), nullable=True),\n        sa.Column(\"price\", sa.Float(), nullable=True),\n        sa.Column(\"quantity\", sa.Integer(), nullable=True),\n        sa.PrimaryKeyConstraint(\"id\"),\n    )",
        "detail": "migrations.versions.7b803e850fb1_init",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.7b803e850fb1_init",
        "description": "migrations.versions.7b803e850fb1_init",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f(\"ix_tokens_token\"), table_name=\"tokens\")\n    op.drop_index(op.f(\"ix_tokens_id\"), table_name=\"tokens\")\n    op.drop_table(\"tokens\")\n    op.drop_index(op.f(\"ix_users_username\"), table_name=\"users\")\n    op.drop_index(op.f(\"ix_users_email\"), table_name=\"users\")\n    op.drop_table(\"users\")\n    op.drop_table(\"items\")\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.7b803e850fb1_init",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "do_run_migrations",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def do_run_migrations(connection: Connection) -> None:\n    context.configure(connection=connection, target_metadata=target_metadata)\n    with context.begin_transaction():\n        context.run_migrations()\nasync def run_async_migrations() -> None:\n    \"\"\"In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = async_engine_from_config(\n        config.get_section(config.config_ini_section, {}),",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\"\"\"\n    asyncio.run(run_async_migrations())\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = Base.metadata",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "kind": 5,
        "importPath": "src.controllers.auth_controller",
        "description": "src.controllers.auth_controller",
        "peekOfCode": "auth_router = APIRouter(\n    tags=[\"authentication\"],\n    responses={404: {\"description\": \"Not found\"}},\n)\n@auth_router.post(\"/signup\", response_model=AuthData)\nasync def signup(\n    data: UserCreateSchema, db: AsyncSession = Depends(get_db)\n) -> AuthData:\n    \"\"\"\n    Create a new user and return authentication token",
        "detail": "src.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "item_router",
        "kind": 5,
        "importPath": "src.controllers.item_controller",
        "description": "src.controllers.item_controller",
        "peekOfCode": "item_router = APIRouter()\n@item_router.get(\"/items\")\nasync def get_items(\n    skip: int = 0, limit: int = 50, db: AsyncSession = Depends(get_db)\n) -> Sequence[ItemSchema]:\n    stmt = select(Item).offset(skip).limit(limit)\n    result = await db.execute(stmt)\n    return result.scalars().all()\n@item_router.post(\"/items\")\nasync def create_item(",
        "detail": "src.controllers.item_controller",
        "documentation": {}
    },
    {
        "label": "user_router",
        "kind": 5,
        "importPath": "src.controllers.user_controller",
        "description": "src.controllers.user_controller",
        "peekOfCode": "user_router = APIRouter(prefix=\"/api/users\", tags=[\"Users\"])\n@user_router.put(\"/{user_id}\")\nasync def update_user(\n    data: UserUpdateSchema,\n    user_id: int,\n    db: AsyncSession = Depends(get_db),\n    user: AsyncSession = Depends(get_current_active_user),\n) -> UserSchema:\n    try:\n        user = await db.get(User, user_id)",
        "detail": "src.controllers.user_controller",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "src.models.base",
        "description": "src.models.base",
        "peekOfCode": "class Base(DeclarativeBase):\n    pass",
        "detail": "src.models.base",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "src.models.item",
        "description": "src.models.item",
        "peekOfCode": "class Item(SQLModel):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    price: str\n    quantity: int",
        "detail": "src.models.item",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "src.models.user",
        "description": "src.models.user",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    id: Mapped[int] = Column(Integer, primary_key=True, autoincrement=True)\n    username: Mapped[str] = Column(String, unique=True, index=True)\n    email: Mapped[str] = Column(String, unique=True, index=True)\n    password: Mapped[str] = Column(String)\n    role: Mapped[str] = Column(String, default=\"user\")\nclass Token(Base):\n    __tablename__ = \"tokens\"\n    id: Mapped[int] = Column(Integer, primary_key=True, index=True)",
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "src.models.user",
        "description": "src.models.user",
        "peekOfCode": "class Token(Base):\n    __tablename__ = \"tokens\"\n    id: Mapped[int] = Column(Integer, primary_key=True, index=True)\n    token: Mapped[str] = Column(String, index=True)\n    user_id: Mapped[int] = Column(Integer, ForeignKey(\"users.id\"))",
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "src.schemas.item",
        "description": "src.schemas.item",
        "peekOfCode": "class Item(BaseModel):\n    id: int\n    name: str\n    price: PositiveFloat\nclass ItemCreate(BaseModel):\n    name: str\n    price: PositiveFloat\nclass ItemUpdate(BaseModel):\n    name: str | None = None\n    price: PositiveFloat | None = None",
        "detail": "src.schemas.item",
        "documentation": {}
    },
    {
        "label": "ItemCreate",
        "kind": 6,
        "importPath": "src.schemas.item",
        "description": "src.schemas.item",
        "peekOfCode": "class ItemCreate(BaseModel):\n    name: str\n    price: PositiveFloat\nclass ItemUpdate(BaseModel):\n    name: str | None = None\n    price: PositiveFloat | None = None",
        "detail": "src.schemas.item",
        "documentation": {}
    },
    {
        "label": "ItemUpdate",
        "kind": 6,
        "importPath": "src.schemas.item",
        "description": "src.schemas.item",
        "peekOfCode": "class ItemUpdate(BaseModel):\n    name: str | None = None\n    price: PositiveFloat | None = None",
        "detail": "src.schemas.item",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "kind": 6,
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "peekOfCode": "class UserSchema(BaseModel):\n    id: int\n    username: str = Field(min_length=3)\n    email: EmailStr\n    role: str\nclass UserCreateSchema(BaseModel):\n    username: str = Field(min_length=3)\n    email: EmailStr\n    password: str = Field(min_length=6)\n    role: str",
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "UserCreateSchema",
        "kind": 6,
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "peekOfCode": "class UserCreateSchema(BaseModel):\n    username: str = Field(min_length=3)\n    email: EmailStr\n    password: str = Field(min_length=6)\n    role: str\nclass UserUpdateSchema(BaseModel):\n    username: Optional[str]\n    email: Optional[EmailStr]\n    role: Optional[str]\nclass AuthData(BaseModel):",
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "UserUpdateSchema",
        "kind": 6,
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "peekOfCode": "class UserUpdateSchema(BaseModel):\n    username: Optional[str]\n    email: Optional[EmailStr]\n    role: Optional[str]\nclass AuthData(BaseModel):\n    user: UserSchema\n    access_token: str\n    refresh_token: str\nclass LoginData(BaseModel):\n    email: EmailStr",
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "AuthData",
        "kind": 6,
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "peekOfCode": "class AuthData(BaseModel):\n    user: UserSchema\n    access_token: str\n    refresh_token: str\nclass LoginData(BaseModel):\n    email: EmailStr\n    password: str",
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "LoginData",
        "kind": 6,
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "peekOfCode": "class LoginData(BaseModel):\n    email: EmailStr\n    password: str",
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "src.services.auth_service",
        "description": "src.services.auth_service",
        "peekOfCode": "def create_access_token(subject: Union[str, Any], expires_delta: int = None) -> str:\n    \"\"\"\n    Create a JWT token\n    Args:\n        subject (dict): data to be encoded\n        expires_delta (timedelta | None, optional): expiration time. Defaults to None.\n    Returns:\n        str: JWT token\n    \"\"\"\n    if expires_delta:",
        "detail": "src.services.auth_service",
        "documentation": {}
    },
    {
        "label": "create_refresh_token",
        "kind": 2,
        "importPath": "src.services.auth_service",
        "description": "src.services.auth_service",
        "peekOfCode": "def create_refresh_token(subject: Union[str, Any], expires_delta: int = None) -> str:\n    \"\"\"\n    Create a refresh token\n    Args:\n        subject (dict): data to be encoded\n        expires_delta (timedelta | None, optional): expiration time. Defaults to None.\n    Returns:\n        str: JWT token\n    \"\"\"\n    to_encode = subject",
        "detail": "src.services.auth_service",
        "documentation": {}
    },
    {
        "label": "protected",
        "kind": 2,
        "importPath": "src.services.auth_service",
        "description": "src.services.auth_service",
        "peekOfCode": "def protected(func):\n    @wraps(func)\n    async def wrapper(*arg, **kwargs):\n        user = get_current_active_user()\n        return await func(user, *arg, **kwargs)\n    return wrapper",
        "detail": "src.services.auth_service",
        "documentation": {}
    },
    {
        "label": "reuseable_oauth",
        "kind": 5,
        "importPath": "src.services.auth_service",
        "description": "src.services.auth_service",
        "peekOfCode": "reuseable_oauth = OAuth2PasswordBearer(tokenUrl=\"/login\", scheme_name=\"JWT\")\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy.sql import Select\nfrom typing import Optional\ndef create_access_token(subject: Union[str, Any], expires_delta: int = None) -> str:\n    \"\"\"\n    Create a JWT token\n    Args:\n        subject (dict): data to be encoded\n        expires_delta (timedelta | None, optional): expiration time. Defaults to None.",
        "detail": "src.services.auth_service",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "src.db",
        "description": "src.db",
        "peekOfCode": "DATABASE_URL = \"postgresql+asyncpg://postgres:root@localhost:5432/fastapi\"\nasync_engine = create_async_engine(DATABASE_URL, echo=True, future=True)\nasync def get_db() -> AsyncSession:\n    async_session = sessionmaker(\n        bind=async_engine, class_=AsyncSession, expire_on_commit=False\n    )\n    async with async_session() as session:\n        yield session",
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "async_engine",
        "kind": 5,
        "importPath": "src.db",
        "description": "src.db",
        "peekOfCode": "async_engine = create_async_engine(DATABASE_URL, echo=True, future=True)\nasync def get_db() -> AsyncSession:\n    async_session = sessionmaker(\n        bind=async_engine, class_=AsyncSession, expire_on_commit=False\n    )\n    async with async_session() as session:\n        yield session",
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "my_daily_task",
        "kind": 2,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "def my_daily_task():\n    print(f\"Task is running at {datetime.now()}\")\n# Set up the scheduler\nscheduler = BackgroundScheduler()\ntrigger = CronTrigger(minute=\"*\")\nscheduler.add_job(my_daily_task, trigger)\nscheduler.start()\nload_dotenv()\n@asynccontextmanager\nasync def lifespan(application: FastAPI):",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "scheduler",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "scheduler = BackgroundScheduler()\ntrigger = CronTrigger(minute=\"*\")\nscheduler.add_job(my_daily_task, trigger)\nscheduler.start()\nload_dotenv()\n@asynccontextmanager\nasync def lifespan(application: FastAPI):\n    yield\n    scheduler.shutdown()\napp = FastAPI(lifespan=lifespan)",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "trigger",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "trigger = CronTrigger(minute=\"*\")\nscheduler.add_job(my_daily_task, trigger)\nscheduler.start()\nload_dotenv()\n@asynccontextmanager\nasync def lifespan(application: FastAPI):\n    yield\n    scheduler.shutdown()\napp = FastAPI(lifespan=lifespan)\napp.include_router(prefix=\"/api/items\",router=item_router)",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "app = FastAPI(lifespan=lifespan)\napp.include_router(prefix=\"/api/items\",router=item_router)\napp.include_router(prefix=\"/api/users\",router=auth_router)",
        "detail": "src.main",
        "documentation": {}
    }
]