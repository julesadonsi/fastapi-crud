[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.models.base_model",
        "description": "src.models.base_model",
        "isExtraImport": true,
        "detail": "src.models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.models.base_model",
        "description": "src.models.base_model",
        "isExtraImport": true,
        "detail": "src.models.base_model",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.user_model",
        "description": "src.models.user_model",
        "isExtraImport": true,
        "detail": "src.models.user_model",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "src.models.user_model",
        "description": "src.models.user_model",
        "isExtraImport": true,
        "detail": "src.models.user_model",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.user_model",
        "description": "src.models.user_model",
        "isExtraImport": true,
        "detail": "src.models.user_model",
        "documentation": {}
    },
    {
        "label": "Role",
        "importPath": "src.models.user_model",
        "description": "src.models.user_model",
        "isExtraImport": true,
        "detail": "src.models.user_model",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "src.models.user_model",
        "description": "src.models.user_model",
        "isExtraImport": true,
        "detail": "src.models.user_model",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.user_model",
        "description": "src.models.user_model",
        "isExtraImport": true,
        "detail": "src.models.user_model",
        "documentation": {}
    },
    {
        "label": "Role",
        "importPath": "src.models.user_model",
        "description": "src.models.user_model",
        "isExtraImport": true,
        "detail": "src.models.user_model",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.user_model",
        "description": "src.models.user_model",
        "isExtraImport": true,
        "detail": "src.models.user_model",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "custom_app_context",
        "importPath": "passlib.apps",
        "description": "passlib.apps",
        "isExtraImport": true,
        "detail": "passlib.apps",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.db",
        "description": "src.db",
        "isExtraImport": true,
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.db",
        "description": "src.db",
        "isExtraImport": true,
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.db",
        "description": "src.db",
        "isExtraImport": true,
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.db",
        "description": "src.db",
        "isExtraImport": true,
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "UserCreateSchema",
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "isExtraImport": true,
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "isExtraImport": true,
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "AuthData",
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "isExtraImport": true,
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "LoginData",
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "isExtraImport": true,
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "isExtraImport": true,
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "UserUpdateSchema",
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "isExtraImport": true,
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "isExtraImport": true,
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "isExtraImport": true,
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "src.services.auth_service",
        "description": "src.services.auth_service",
        "isExtraImport": true,
        "detail": "src.services.auth_service",
        "documentation": {}
    },
    {
        "label": "create_refresh_token",
        "importPath": "src.services.auth_service",
        "description": "src.services.auth_service",
        "isExtraImport": true,
        "detail": "src.services.auth_service",
        "documentation": {}
    },
    {
        "label": "authenticated",
        "importPath": "src.services.auth_service",
        "description": "src.services.auth_service",
        "isExtraImport": true,
        "detail": "src.services.auth_service",
        "documentation": {}
    },
    {
        "label": "authenticated",
        "importPath": "src.services.auth_service",
        "description": "src.services.auth_service",
        "isExtraImport": true,
        "detail": "src.services.auth_service",
        "documentation": {}
    },
    {
        "label": "get_current_active_user",
        "importPath": "src.services.auth_service",
        "description": "src.services.auth_service",
        "isExtraImport": true,
        "detail": "src.services.auth_service",
        "documentation": {}
    },
    {
        "label": "ItemCreate",
        "importPath": "src.schemas.item_schema",
        "description": "src.schemas.item_schema",
        "isExtraImport": true,
        "detail": "src.schemas.item_schema",
        "documentation": {}
    },
    {
        "label": "ItemUpdate",
        "importPath": "src.schemas.item_schema",
        "description": "src.schemas.item_schema",
        "isExtraImport": true,
        "detail": "src.schemas.item_schema",
        "documentation": {}
    },
    {
        "label": "ItemSchema",
        "importPath": "src.schemas.item_schema",
        "description": "src.schemas.item_schema",
        "isExtraImport": true,
        "detail": "src.schemas.item_schema",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "PositiveFloat",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "InvalidTokenError",
        "importPath": "jwt",
        "description": "jwt",
        "isExtraImport": true,
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "BackgroundScheduler",
        "importPath": "apscheduler.schedulers.background",
        "description": "apscheduler.schedulers.background",
        "isExtraImport": true,
        "detail": "apscheduler.schedulers.background",
        "documentation": {}
    },
    {
        "label": "CronTrigger",
        "importPath": "apscheduler.triggers.cron",
        "description": "apscheduler.triggers.cron",
        "isExtraImport": true,
        "detail": "apscheduler.triggers.cron",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "item_router",
        "importPath": "src.controllers.item_controller",
        "description": "src.controllers.item_controller",
        "isExtraImport": true,
        "detail": "src.controllers.item_controller",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "importPath": "src.controllers.auth_controller",
        "description": "src.controllers.auth_controller",
        "isExtraImport": true,
        "detail": "src.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.09a097d25328_relation",
        "description": "alembic.versions.09a097d25328_relation",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('items', sa.Column('price', sa.Float(), nullable=True))\n    op.add_column('items', sa.Column('quantity', sa.Integer(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('items', 'quantity')\n    op.drop_column('items', 'price')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.09a097d25328_relation",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.09a097d25328_relation",
        "description": "alembic.versions.09a097d25328_relation",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('items', 'quantity')\n    op.drop_column('items', 'price')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.09a097d25328_relation",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.58fcf9ab912e_add_name_to_items_table",
        "description": "alembic.versions.58fcf9ab912e_add_name_to_items_table",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column(\"items\", sa.Column(\"name\", sa.String(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column(\"items\", \"name\")\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.58fcf9ab912e_add_name_to_items_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.58fcf9ab912e_add_name_to_items_table",
        "description": "alembic.versions.58fcf9ab912e_add_name_to_items_table",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column(\"items\", \"name\")\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.58fcf9ab912e_add_name_to_items_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.855e11c779be_init",
        "description": "alembic.versions.855e11c779be_init",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"users\",\n        sa.Column(\n            \"id\",\n            sa.Integer(),\n            autoincrement=True,\n            nullable=False,\n        ),",
        "detail": "alembic.versions.855e11c779be_init",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.855e11c779be_init",
        "description": "alembic.versions.855e11c779be_init",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(\n        op.f(\"ix_users_phone\"),\n        table_name=\"users\",\n    )\n    op.drop_index(\n        op.f(\"ix_users_email\"),\n        table_name=\"users\",\n    )",
        "detail": "alembic.versions.855e11c779be_init",
        "documentation": {}
    },
    {
        "label": "]",
        "kind": 5,
        "importPath": "alembic.versions.855e11c779be_init",
        "description": "alembic.versions.855e11c779be_init",
        "peekOfCode": "] = None\nbranch_labels: Union[\n    str,\n    Sequence[str],\n    None,\n] = None\ndepends_on: Union[\n    str,\n    Sequence[str],\n    None,",
        "detail": "alembic.versions.855e11c779be_init",
        "documentation": {}
    },
    {
        "label": "]",
        "kind": 5,
        "importPath": "alembic.versions.855e11c779be_init",
        "description": "alembic.versions.855e11c779be_init",
        "peekOfCode": "] = None\ndepends_on: Union[\n    str,\n    Sequence[str],\n    None,\n] = None\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"users\",",
        "detail": "alembic.versions.855e11c779be_init",
        "documentation": {}
    },
    {
        "label": "]",
        "kind": 5,
        "importPath": "alembic.versions.855e11c779be_init",
        "description": "alembic.versions.855e11c779be_init",
        "peekOfCode": "] = None\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"users\",\n        sa.Column(\n            \"id\",\n            sa.Integer(),\n            autoincrement=True,\n            nullable=False,",
        "detail": "alembic.versions.855e11c779be_init",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.b80f80d6240b_relation",
        "description": "alembic.versions.b80f80d6240b_relation",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"items\",\n        sa.Column(\"id\", sa.Integer(), autoincrement=True, nullable=False),\n        sa.Column(\"user_id\", sa.Integer(), nullable=False),\n        sa.ForeignKeyConstraint(\n            [\"user_id\"],\n            [\"users.id\"],\n        ),",
        "detail": "alembic.versions.b80f80d6240b_relation",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.b80f80d6240b_relation",
        "description": "alembic.versions.b80f80d6240b_relation",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table(\"items\")\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.b80f80d6240b_relation",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = Base.metadata",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "kind": 5,
        "importPath": "src.controllers.auth_controller",
        "description": "src.controllers.auth_controller",
        "peekOfCode": "auth_router = APIRouter(\n    tags=[\"authentication\"],\n    responses={404: {\"description\": \"Not found\"}},\n)\n@auth_router.post(\"/signup\", response_model=AuthData)\nasync def signup(data: UserCreateSchema, db: Session = Depends(get_db)) -> AuthData:\n    \"\"\"\n    Create a new user and return authentication token\n    \"\"\"\n    existing_user = db.query(User).filter_by(phone=data.phone).first()",
        "detail": "src.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "item_router",
        "kind": 5,
        "importPath": "src.controllers.item_controller",
        "description": "src.controllers.item_controller",
        "peekOfCode": "item_router = APIRouter()\n@item_router.get(\"/items\")\nasync def get_items(\n    skip: int = 0, limit: int = 50, db: Session = Depends(get_db)\n) -> Sequence[ItemSchema]:\n    stmt = select(Item).offset(skip).limit(limit)\n    result = await db.execute(stmt)\n    return result.scalars().all()\n@item_router.post(\"/items\", response_model=ItemSchema)\nasync def create_item(data: ItemCreate,db: Session = Depends(get_db),user=Depends(authenticated)):",
        "detail": "src.controllers.item_controller",
        "documentation": {}
    },
    {
        "label": "user_router",
        "kind": 5,
        "importPath": "src.controllers.user_controller",
        "description": "src.controllers.user_controller",
        "peekOfCode": "user_router = APIRouter(prefix=\"/api/users\", tags=[\"Users\"])\n@user_router.put(\"/{user_id}\")\nasync def update_user(\n    data: UserUpdateSchema,\n    user_id: int,\n    db: Session = Depends(get_db),\n    user: AsyncSession = Depends(get_current_active_user),\n) -> UserSchema:\n    try:\n        user = db.get(User, user_id)",
        "detail": "src.controllers.user_controller",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "src.models.base_model",
        "description": "src.models.base_model",
        "peekOfCode": "class Base(DeclarativeBase):\n    pass",
        "detail": "src.models.base_model",
        "documentation": {}
    },
    {
        "label": "Role",
        "kind": 6,
        "importPath": "src.models.user_model",
        "description": "src.models.user_model",
        "peekOfCode": "class Role(Enum):\n    ADMIN = \"admin\"\n    USER = \"user\"\n    OWNER = \"owner\"\nclass User(Base):\n    __tablename__ = \"users\"\n    id: Mapped[int] = Column(Integer, primary_key=True, autoincrement=True)\n    phone: Mapped[str] = Column(String, unique=True, index=True)\n    email: Mapped[str] = Column(String, unique=True, index=True, nullable=True)\n    password: Mapped[str] = Column(String)",
        "detail": "src.models.user_model",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "src.models.user_model",
        "description": "src.models.user_model",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    id: Mapped[int] = Column(Integer, primary_key=True, autoincrement=True)\n    phone: Mapped[str] = Column(String, unique=True, index=True)\n    email: Mapped[str] = Column(String, unique=True, index=True, nullable=True)\n    password: Mapped[str] = Column(String)\n    role: str = Column(SQLAEnum(Role), default=Role.USER)\n    items: Mapped[List[\"Item\"]] = relationship(back_populates=\"user\")\nclass Item(Base):\n    __tablename__ = \"items\"",
        "detail": "src.models.user_model",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "src.models.user_model",
        "description": "src.models.user_model",
        "peekOfCode": "class Item(Base):\n    __tablename__ = \"items\"\n    id: Mapped[int] = Column(Integer, primary_key=True, autoincrement=True)\n    name: Mapped[str] = Column(String)\n    price: Mapped[float] = Column(Float)\n    quantity: Mapped[int] = Column(Integer)\n    user_id: Mapped[int] = Column(Integer, ForeignKey(\"users.id\"), nullable=False)\n    user: Mapped[\"User\"] = relationship(\n        User, back_populates=\"items\", foreign_keys=[user_id]\n    )",
        "detail": "src.models.user_model",
        "documentation": {}
    },
    {
        "label": "ItemSchema",
        "kind": 6,
        "importPath": "src.schemas.item_schema",
        "description": "src.schemas.item_schema",
        "peekOfCode": "class ItemSchema(BaseModel):\n    id: int\n    name: str\n    price: PositiveFloat\n    user: UserSchema\n    class Config:\n        from_attributes = True\nclass ItemCreate(BaseModel):\n    name: str\n    price: PositiveFloat",
        "detail": "src.schemas.item_schema",
        "documentation": {}
    },
    {
        "label": "ItemCreate",
        "kind": 6,
        "importPath": "src.schemas.item_schema",
        "description": "src.schemas.item_schema",
        "peekOfCode": "class ItemCreate(BaseModel):\n    name: str\n    price: PositiveFloat\n    quantity: PositiveFloat\nclass ItemUpdate(BaseModel):\n    name: str | None = None\n    price: PositiveFloat | None = None\n    quantity: PositiveFloat | None = None",
        "detail": "src.schemas.item_schema",
        "documentation": {}
    },
    {
        "label": "ItemUpdate",
        "kind": 6,
        "importPath": "src.schemas.item_schema",
        "description": "src.schemas.item_schema",
        "peekOfCode": "class ItemUpdate(BaseModel):\n    name: str | None = None\n    price: PositiveFloat | None = None\n    quantity: PositiveFloat | None = None",
        "detail": "src.schemas.item_schema",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "kind": 6,
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "peekOfCode": "class UserSchema(BaseModel):\n    id: int\n    phone: str = Field(min_length=3)\n    email: EmailStr = Field(min_length=3)\n    role: Role\nclass UserCreateSchema(BaseModel):\n    phone: str = Field(min_length=3)\n    email: EmailStr = Field(min_length=3)\n    password: str = Field(min_length=6)\n    role: Role",
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "UserCreateSchema",
        "kind": 6,
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "peekOfCode": "class UserCreateSchema(BaseModel):\n    phone: str = Field(min_length=3)\n    email: EmailStr = Field(min_length=3)\n    password: str = Field(min_length=6)\n    role: Role\nclass UserUpdateSchema(BaseModel):\n    phone: Optional[str]\n    email: Optional[EmailStr]\n    role: Optional[str]\nclass AuthData(BaseModel):",
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "UserUpdateSchema",
        "kind": 6,
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "peekOfCode": "class UserUpdateSchema(BaseModel):\n    phone: Optional[str]\n    email: Optional[EmailStr]\n    role: Optional[str]\nclass AuthData(BaseModel):\n    user: UserSchema\n    access_token: str\n    refresh_token: str\nclass LoginData(BaseModel):\n    phone: str",
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "AuthData",
        "kind": 6,
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "peekOfCode": "class AuthData(BaseModel):\n    user: UserSchema\n    access_token: str\n    refresh_token: str\nclass LoginData(BaseModel):\n    phone: str\n    password: str",
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "LoginData",
        "kind": 6,
        "importPath": "src.schemas.user_shema",
        "description": "src.schemas.user_shema",
        "peekOfCode": "class LoginData(BaseModel):\n    phone: str\n    password: str",
        "detail": "src.schemas.user_shema",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "src.services.auth_service",
        "description": "src.services.auth_service",
        "peekOfCode": "def create_access_token(\n    subject: Union[\n        str,\n        Any,\n    ],\n    expires_delta: int = None,\n) -> str:\n    \"\"\"\n    Create a JWT token\n    Args:",
        "detail": "src.services.auth_service",
        "documentation": {}
    },
    {
        "label": "create_refresh_token",
        "kind": 2,
        "importPath": "src.services.auth_service",
        "description": "src.services.auth_service",
        "peekOfCode": "def create_refresh_token(\n    subject: Union[\n        str,\n        Any,\n    ],\n    expires_delta: int = None,\n) -> str:\n    \"\"\"\n    Create a refresh token\n    Args:",
        "detail": "src.services.auth_service",
        "documentation": {}
    },
    {
        "label": "reuseable_oauth",
        "kind": 5,
        "importPath": "src.services.auth_service",
        "description": "src.services.auth_service",
        "peekOfCode": "reuseable_oauth = OAuth2PasswordBearer(\n    tokenUrl=\"/login\",\n    scheme_name=\"JWT\",\n)\nfrom sqlalchemy.orm import (\n    Session,\n)\ndef create_access_token(\n    subject: Union[\n        str,",
        "detail": "src.services.auth_service",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "src.db",
        "description": "src.db",
        "peekOfCode": "def get_db() -> Session:\n    session = sessionmaker(\n        bind=async_engine,\n        class_=Session,\n        expire_on_commit=False,\n    )\n    with session() as session:\n        yield session",
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "src.db",
        "description": "src.db",
        "peekOfCode": "DATABASE_URL = \"postgresql://postgres:root@localhost:5432/fastapi\"\nasync_engine = create_engine(\n    DATABASE_URL,\n    echo=True,\n    future=True,\n)\ndef get_db() -> Session:\n    session = sessionmaker(\n        bind=async_engine,\n        class_=Session,",
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "async_engine",
        "kind": 5,
        "importPath": "src.db",
        "description": "src.db",
        "peekOfCode": "async_engine = create_engine(\n    DATABASE_URL,\n    echo=True,\n    future=True,\n)\ndef get_db() -> Session:\n    session = sessionmaker(\n        bind=async_engine,\n        class_=Session,\n        expire_on_commit=False,",
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "my_daily_task",
        "kind": 2,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "def my_daily_task():\n    print(f\"Task is running at {datetime.now()}\")\n# Set up the scheduler\nscheduler = BackgroundScheduler()\ntrigger = CronTrigger(minute=\"*\")\nscheduler.add_job(my_daily_task, trigger)\nscheduler.start()\nload_dotenv()\n@asynccontextmanager\nasync def lifespan(application: FastAPI):",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "scheduler",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "scheduler = BackgroundScheduler()\ntrigger = CronTrigger(minute=\"*\")\nscheduler.add_job(my_daily_task, trigger)\nscheduler.start()\nload_dotenv()\n@asynccontextmanager\nasync def lifespan(application: FastAPI):\n    yield\n    scheduler.shutdown()\napp = FastAPI(lifespan=lifespan)",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "trigger",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "trigger = CronTrigger(minute=\"*\")\nscheduler.add_job(my_daily_task, trigger)\nscheduler.start()\nload_dotenv()\n@asynccontextmanager\nasync def lifespan(application: FastAPI):\n    yield\n    scheduler.shutdown()\napp = FastAPI(lifespan=lifespan)\napp.include_router(prefix=\"/api/items\", router=item_router)",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "app = FastAPI(lifespan=lifespan)\napp.include_router(prefix=\"/api/items\", router=item_router)\napp.include_router(prefix=\"/api/users\", router=auth_router)",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    }
]